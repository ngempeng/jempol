#!/bin/bash

# Define Colors
y='\033[1;33m'
BGX="\033[42m"
CYAN="\033[96m"
z="\033[96m"
RED='\033[0;31m'
NC='\033[0m'
gray="\e[1;30m"
Blue="\033[0;34m"
green='\033[0;32m'
grenbo="\e[92;1m"
purple="\033[1;95m"
YELL='\033[0;33m'

#INTALLER-UDP
#UDPX="https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&id=1S3IE25v_fyUfCLslnujFBSBMNunDHDk2' -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')&id=1S3IE25v_fyUfCLslnujFBSBMNunDHDk2"

# Get VPS Information
ISP=$(cat /etc/xray/isp)
CITY=$(cat /etc/xray/city)
WKT=$(cat /etc/xray/timezone)
DAY=$(date +%A)
DATE=$(date +%m/%d/%Y)
DATE2=$(date -R | cut -d " " -f -5)
IPVPS=$(cat /etc/xray/ipvps)
MYIP=$(cat /etc/xray/ipvps)
domain=$(cat /etc/xray/domain)
username=$(cat /usr/bin/user)
premium=$(cat /etc/xray/premium)


# Get System Information
RAM=$(free -m | awk 'NR==2 {print $2}')
USAGERAM=$(free -m | awk 'NR==2 {print $3}')
MEMOFREE=$(printf '%-1s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')")
LOADCPU=$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')
MODEL=$(grep -w PRETTY_NAME /etc/os-release | cut -d= -f2 | tr -d '"')
CORE=$(grep -c cpu[0-9] /proc/stat)
DATEVPS=$(date +'%d/%m/%Y')
TIMEZONE=$(date +'%H:%M:%S')
SERONLINE=$(uptime -p | cut -d " " -f 2-10000)

# username
rm -f /usr/bin/user
username=$(cat /etc/xray/premium | grep $MYIP | awk '{print $2}')
echo "$username" >/usr/bin/user
# validity
rm -f /usr/bin/e
valid=$(cat /etc/xray/premium | grep $MYIP | awk '{print $3}')
echo "$valid" >/usr/bin/e
# version
rm -f /usr/bin/ver
version=$(cat /etc/xray/premium | grep $MYIP | awk '{print $5}')
echo "$version" >/usr/bin/ver
# DETAIL ORDER
username=$(cat /usr/bin/user)
oid=$(cat /usr/bin/ver)
exp=$(cat /usr/bin/e)
clear
# CERTIFICATE STATUS
d1=$(date -d "$valid" +%s)
d2=$(date -d "$today" +%s)
certifacate=$(((d1 - d2) / 86400))
# VPS Information
DATE=$(date +'%Y-%m-%d')
datediff() {
    d1=$(date -d "$1" +%s)
    d2=$(date -d "$2" +%s)
    echo -e "$COLOR1 $NC Expiry In   : $(( (d1 - d2) / 86400 )) Days"
}
mai="datediff "$Exp" "$DATE""

# Status ExpiRED Active | Geo Project
Info="${green}Active${NC}"
Error="${RED}ExpiRED${NC}"
today=`date -d "0 days" +"%Y-%m-%d"`
Exp1=$(cat /etc/xray/premium | grep $MYIP | awk '{print $3}')
if [[ $today < $Exp1 ]]; then
sts="${Info}"
else
sts="${Error}"
fi
#echo -e "\e[32mloading...\e[0m"
clear

# Get CPU Information
cpu_usage1="$(ps aux | awk 'BEGIN {sum=0} {sum+=$3}; END {print sum}')"
cpu_usage="$((${cpu_usage1/\.*} / ${coREDiilik:-1}))"
cpu_usage+=" %"

# OS Uptime
uptime_info=$(uptime -p | cut -d " " -f 2-10)

# Display Information
#echo -e "ISP: $ISP"
#echo -e "City: $CITY"
#echo -e "IPVPS: $IPVPS"
#echo -e "RAM: $RAM MB"
#echo -e "CPU Usage: $cpu_usage"
#echo -e "Uptime: $uptime_info"
#clear

# OS Uptime
uptime="$(uptime -p | cut -d " " -f 2-10)"

clear
# Service Status
ssh_service=$(/etc/init.d/ssh status | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
dropbear_service=$(/etc/init.d/dropbear status | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
haproxy_service=$(systemctl status haproxy | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
xray_service=$(systemctl status xray | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
nginx_service=$(systemctl status nginx | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
clear
#Status | Geo Project
clear
# STATUS SERVICE  SSH 
if [[ $ssh_service == "running" ]]; then 
   status_ssh="${grenbo}ON✓${NC}"
else
   status_ssh="${RED}🔴${NC} "
fi

# // SSH Websocket Proxy
ssh_ws=$( systemctl status ws | grep Active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g' )
if [[ $ssh_ws == "running" ]]; then
    status_ws_epro="${grenbo}ON✓${NC}"
else
    status_ws_epro="${RED}🔴${NC} "
fi

# STATUS SERVICE HAPROXY
if [[ $haproxy_service == "running" ]]; then 
   status_haproxy="${grenbo}ON✓${NC}"
else
   status_haproxy="${RED}🔴${NC} "
fi

# STATUS SERVICE XRAY
if [[ $xray_service == "running" ]]; then 
   status_xray="${grenbo}ON✓${NC}"
else
   status_xray="${RED}🔴${NC} "
fi

# STATUS SERVICE NGINX
if [[ $nginx_service == "running" ]]; then 
   status_nginx="${grenbo}ON✓${NC}"
else
   status_nginx="${RED}🔴${NC} "
fi

# STATUS SERVICE Dropbear
if [[ $dropbear_service == "running" ]]; then 
   status_dropbear="${grenbo}ON✓${NC}"
else
   status_dropbear="${RED}🔴${NC} "
fi
#####INFOAKUN
vlx=$(grep -c -E "^#& " "/etc/xray/config.json")
let vla=$vlx/2
vmc=$(grep -c -E "^### " "/etc/xray/config.json")
let vma=$vmc/2
ssh1="$(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd | wc -l)"
trx=$(grep -c -E "^#! " "/etc/xray/config.json")
let trb=$trx/2
ssx=$(grep -c -E "^#ss# " "/etc/xray/config.json")
let ssa=$ssx/2
clear
###########
KANAN="\033[1;32m<\033[1;33m<\033[1;31m<\033[1;31m$NC"
KIRI="\033[1;32m>\033[1;33m>\033[1;31m>\033[1;31m$NC"
########
r="\033[1;31m"  #REDTERANG
a=" ${grenbo}ACCOUNT PREMIUM" 
printf ""
#figlet  PremiumVPN  | lolcat
printf " ${z}╭══════════════════════════════════════════════════════════╮${NC}\n"
printf " ${z}│${NC}\033[42m           Welcome To Script Server Premium VIP           ${NC}│${NC}\n"
printf " ${z}╰══════════════════════════════════════════════════════════╯${NC}\n"
printf " ╭══════════════════════════════════════════════════════════╮${NC}\n"
printf "  ${r}✅ ${NC}${Blue}System OS${NC}     ${Blue}=   ${NC}${MODEL}\n"
printf "  ${r}✅ ${NC}${Blue}Cpu Info${NC}      ${Blue}=   ${NC}${CORE} Core / ${LOADCPU}% / ${cpu_usage}%\n"
printf "  ${r}✅ ${NC}${Blue}Server RAM${NC}    ${Blue}=   ${NC}${USAGERAM} MB / ${RAM} MB\n"
printf "  ${r}✅ ${NC}${Blue}Uptime Server${NC} ${Blue}=   ${NC}${SERONLINE}\n"
printf "  ${r}✅ ${NC}${Blue}IP VPS${NC}        ${Blue}=   ${NC}${IPVPS}\n"
printf "  ${r}✅ ${NC}${Blue}Domain${NC}        ${Blue}=   ${NC}${domain}\n"
printf " ╰══════════════════════════════════════════════════════════╯${NC}\n"
printf "                 ${KIRI} ${grenbo}INFORMATION ACCOUNT${NC} ${KANAN}\n"
printf " ╭══════════════════════════════════════════════════════════╮${NC}\n"
printf " $Blue    SSH/OVPN     SOCKS     VMESS     VLESS     TROJAN\n"
printf "         ${grenbo}${ssh1}${NC}          ${grenbo}${ssa}${NC}         ${grenbo}${vma}${NC}         ${grenbo}${vla}${NC}          ${grenbo}${trb}${NC}\n"
printf " ╰══════════════════════════════════════════════════════════╯${NC}\n"
printf "              ${KIRI} ${grenbo}Hidup Berawal Dari Mimpi${NC} ${KANAN}\n"
printf " ${z}╭══════════════════════════════════════════════════════════╮${NC}\n"
printf " ${z}│ ${NC}$Blue SSH$NC : $status_ssh        $Blue NGINX$NC : $status_nginx        $Blue XRAY$NC : $status_xray        ${NC}│${NC}\n"
printf " ${z}│ ${NC}$Blue WS-ePRO$NC : $status_ws_epro    $Blue DROPBEAR$NC : $status_dropbear     $Blue HAPROXY$NC : $status_haproxy     ${NC}│${NC}\n"
printf " ${z}╰══════════════════════════════════════════════════════════╯${NC}\n"
printf " ╭══════════════════════════════════════════════════════════╮${NC}\n"
printf " │${NC} [${r}01${NC}]${grenbo} SSH MENU${NC}     │${NC} [${r}09${NC}]${grenbo} DELL ALL EXP${NC}${NC} │${NC} [${r}17${NC}]${grenbo} BCKP/RSTR   ${NC}│${NC}\n"
printf " │${NC} [${r}02${NC}]${grenbo} VMESS MENU${NC}   │${NC} [${r}10${NC}]${grenbo} AUTOREBOOT${NC}  ${NC} │${NC} [${r}18${NC}]${grenbo} REBOOT      ${NC}│${NC}\n"
printf " │${NC} [${r}03${NC}]${grenbo} VLESS MENU${NC}   │${NC} [${r}11${NC}]${grenbo} INFO PORT${NC}   ${NC} │${NC} [${r}19${NC}]${grenbo} RESTART     ${NC}│${NC}\n"
printf " │${NC} [${r}04${NC}]${grenbo} TROJAN MENU${NC}  │${NC} [${r}12${NC}]${grenbo} SPEEDTEST${NC}   ${NC} │${NC} [${r}20${NC}]${grenbo} DOMAIN      ${NC}│${NC}\n"
printf " │${NC} [${r}05${NC}]${grenbo} SHADOW MENU${NC}  │${NC} [${r}13${NC}]${grenbo} RUNNING${NC}     ${NC} │${NC} [${r}21${NC}]${grenbo} CERT SSL    ${NC}│${NC}\n"
printf " │${NC} [${r}06${NC}]${grenbo} TRIAL MENU${NC}   │${NC} [${r}14${NC}]${grenbo} CLEAR LOG${NC}   ${NC} │${NC} [${r}22${NC}]${grenbo} INS. UDP    ${NC}│${NC}\n"
printf " │${NC} [${r}07${NC}]${grenbo} VPS INFO${NC}     │${NC} [${r}15${NC}]${grenbo} CREATE SLOW${NC} ${NC} │${NC} [${r}23${NC}]${grenbo} CLEAR CACHE ${NC}│${NC}\n"
printf " │${NC} [${r}08${NC}]${grenbo} BOT NOTIF${NC}    │${NC} [${r}16${NC}]${grenbo} UPDATE SCRIPT${NC}${NC}│${NC} [${r}24${NC}]${grenbo} BOT PANEL   ${NC}│${NC}\n"
printf " │                                                  	    ${NC}│${NC}\n"
printf " │${NC} [${r}00${NC}]${grenbo} BACK TO EXIT MENU${NC} ${KANAN} \E[0m\033[0;34m                              ${NC}│${NC}\n"
printf " ╰══════════════════════════════════════════════════════════╯${NC}\n"
printf " ${z}╭══════════════════════════════════════════════════════════╮${NC}\n"
printf " ${z}│$NC$Blue Version$NC       ${Blue}=$NC $oid                                  ${NC}${z}│${NC}\n"
printf " ${z}│$NC$Blue User$NC          ${Blue}=$NC $username                                      ${NC}${z}│${NC}\n"
printf " ${z}│$NC$Blue Script Status$NC ${Blue}=$NC $sts                                   ${NC}${z}│${NC}\n"
printf " ${z}│$NC$Blue Expiry script$NC $Blue=$grenbo $exp$NC ($r $certifacate ${NC}Days )                $NC${z}│$NC\n"
printf " ${z}╰══════════════════════════════════════════════════════════╯${NC}\n"
echo
read -p " Select menu : " opt
echo -e ""
case $opt in
1 | 01) clear ; ssh ;;
2 | 02) clear ; vmess ;;
3 | 03) clear ; vless ;;
4 | 04) clear ; trojan ;;
5 | 05) clear ; ss ;;
6 | 06) clear ; m-trial ;;
7 | 07) clear ; top ; echo ""
echo -e " ${GREEN} Back to menu in 1 sec ${NC}"
sleep 1
menu ;;
8 | 08) clear ; bot ;;
9 | 09) clear ; xp ; echo ""
echo -e " ${GREEN} Back to menu in 1 sec ${NC}"
sleep 1
menu ;;
10) clear ; autoreboot ;;
11) clear ; prot
echo ""
read -n 1 -s -r -p "Press any key to back on menu"
menu ;;
12) clear ; speedtest
echo ""
read -n 1 -s -r -p "Press any key to back on menu"
menu ;;
13) clear ; run ;;
14) clear ; clearlog ;;
15) clear ; sd ;;
16) clear
echo -e "${green}ANDA YAKIN UNTUK UPDATE SCRIPT INI ? $NC"
echo -e "${green}MINIMAL RAM 2 GB BIAR DISK TIDAK FULL $NC"
echo -e "${green}OS SUPPORT UBUNTU 20.04 ONLY $NC"
wget https://raw.githubusercontent.com/ngempeng/botol/jempol/update.sh && chmod +x update.sh && ./update.sh ;;
17) clear ; menu-backup ;;
18) clear ; reboot ;;
19) clear ; restart ;;
20) addhost ;;
21) clear ; fixcert ;;
22) clear
echo -e "${green}ANDA YAKIN UNTUK MEMASANG SCRIPT INI ? $NC"
echo -e "${green}MINIMAL RAM 2 GB BIAR DISK TIDAK FULL $NC"
echo -e "${green}OS SUPPORT UBUNTU 20.04 ONLY $NC"
echo -e ""
read -p "SUDAH LAPOR KE ADMIN ? [Y/N]:" arg
if [[ $arg == 'Y' ]]; then
  echo -e "${Blue}Tindakan Diteruskan! $NC"
  echo -e "${green}START. . . $NC"
elif [[ $arg == 'y' ]]; then
  echo -e "${Blue}Tindakan Diteruskan! $NC"
  clear
  echo -e "${Blue}START . . .$NC"
elif [[ $arg == 'N' ]]; then
  echo -e "${RED}Tindakan Dihentikan! $NC"
  sleep 1
  clear
  menu
  exit 0
elif [[ $arg == 'n' ]]; then
  echo -e "${RED}Tindakan Dihentikan! $NC"
  sleep 1
  clear
  rm -f /root/update.sh
  exit 0
else
  echo -e "${RED}Argumen Tidak Diketahui! $NC"
  sleep 1
  clear
  rm -f /root/update.sh
  exit 0
fi
##########
clear
wget https://raw.githubusercontent.com/ngempeng/jempol/main/ssh-udp/install-udp && rm -rf /tmp/cookies.txt && chmod +x install-udp && ./install-udp
;;
23) clear ; clearcache ;;
24) clear ; add-bot-panel ;;
0 | 00)
figlet PremiumVPN | lolcat
;;
x) menu ;;
*)
echo -e ""
menu ;;
esac
